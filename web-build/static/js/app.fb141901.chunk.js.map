{"version":3,"sources":["src/machines/stateMachine.ts","App.tsx"],"names":["format","val","Math","round","Number","EPSILON","toString","stateMachine","createMachine","predictableActionArguments","initial","context","celsius","fahrenheit","states","ready","on","CHANGE_CELSIUS","actions","assign","_context","value","length","parseInt","CHANGE_FAHRENHEIT","isValidEvent","e","isNaN","App","useMachine","send","View","style","styles","container","Text","field","TextInput","keyboardType","onChange","event","nativeEvent","text","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","flexDirection"],"mappings":"kNAmBMA,EAAS,SAACC,GAAD,OACZC,KAAKC,MAA+B,KAAxBF,EAAMG,OAAOC,UAAkB,KAAKC,YAEtCC,EAAeC,wBAI1B,CACAC,4BAA4B,EAC5BC,QAAS,QACTC,QAAS,CACPC,QAAS,IACTC,WAAY,KAEdC,OAAQ,CACNC,MAAO,CACLC,GAAI,CACFC,eAAgB,CACdC,QAASC,kBAAO,SAACC,EAAD,GAA0B,IAAbC,EAAY,EAAZA,MAC3B,MAAO,CACLT,QAASS,EACTR,WAAYQ,EAAMC,OACdtB,EAAO,IAAAuB,SAASF,EAAO,IAAgB,IACvC,QAIVG,kBAAmB,CACjBN,QAASC,kBAAO,SAACC,EAAD,GAA0B,IAAbC,EAAY,EAAZA,MAC3B,MAAO,CACLR,WAAYQ,EACZT,QAASS,EAAMC,OACXtB,GAAQuB,SAASF,EAAO,IAAM,KAAO,EAAI,IACzC,a,QChDZI,EAAe,SAACC,GACpB,OAAQC,MAAMvB,OAAOsB,KAGR,SAASE,IACtB,MAA4BC,qBAAWtB,GAAvC,WAASI,EAAT,KAASA,QAAWmB,EAApB,KACA,OACE,eAACC,EAAA,QAAD,CAAMC,MAAOC,EAAOC,UAApB,UACE,cAACC,EAAA,QAAD,oCACA,eAACJ,EAAA,QAAD,CAAMC,MAAOC,EAAOG,MAApB,UACE,cAACD,EAAA,QAAD,sBACA,cAACE,EAAA,QAAD,CACEC,aAAa,UACbC,SAAU,SAACC,GACLf,EAAae,EAAMC,YAAYC,OACjCZ,EAAK,iBAAkB,CACrBT,MAAOmB,EAAMC,YAAYC,QAI/BrB,MAAOV,EAAQC,aAGnB,eAACmB,EAAA,QAAD,CAAMC,MAAOC,EAAOG,MAApB,UACE,cAACD,EAAA,QAAD,yBACA,cAACE,EAAA,QAAD,CACEC,aAAa,UACbjB,MAAOV,EAAQE,WACf0B,SAAU,SAACC,GACLf,EAAae,EAAMC,YAAYC,OACjCZ,EAAK,oBAAqB,CACxBT,MAAOmB,EAAMC,YAAYC,gBAUzC,IAAMT,EAASU,UAAWC,OAAO,CAC/BV,UAAW,CACTW,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAElBZ,MAAO,CACLa,cAAe,SACfF,WAAY,SACZC,eAAgB,iB","file":"static/js/app.fb141901.chunk.js","sourcesContent":["import { assign, createMachine } from \"xstate\";\n\ntype MachineContext = {\n  celsius: string;\n  fahrenheit: string;\n};\n\ntype MachineEvents =\n  | {\n      type: \"CHANGE_CELSIUS\";\n      value: string;\n    }\n  | {\n      type: \"CHANGE_FAHRENHEIT\";\n      value: string;\n    };\n\ntype MachineStates = { value: \"ready\"; context: MachineContext };\n\nconst format = (val: number) =>\n  (Math.round((val + Number.EPSILON) * 100) / 100).toString();\n\nexport const stateMachine = createMachine<\n  MachineContext,\n  MachineEvents,\n  MachineStates\n>({\n  predictableActionArguments: true,\n  initial: \"ready\",\n  context: {\n    celsius: \"0\",\n    fahrenheit: \"0\",\n  },\n  states: {\n    ready: {\n      on: {\n        CHANGE_CELSIUS: {\n          actions: assign((_context, { value }) => {\n            return {\n              celsius: value,\n              fahrenheit: value.length\n                ? format(parseInt(value, 10) * (9 / 5) + 32)\n                : \"\",\n            };\n          }),\n        },\n        CHANGE_FAHRENHEIT: {\n          actions: assign((_context, { value }) => {\n            return {\n              fahrenheit: value,\n              celsius: value.length\n                ? format((parseInt(value, 10) - 32) * (5 / 9))\n                : \"\",\n            };\n          }),\n        },\n      },\n    },\n  },\n});\n","import { useMachine } from \"@xstate/react\";\nimport { StyleSheet, Text, TextInput, View } from \"react-native\";\nimport { stateMachine } from \"./src/machines/stateMachine\";\n\nconst isValidEvent = (e: string) => {\n  return !isNaN(Number(e));\n};\n\nexport default function App() {\n  const [{ context }, send] = useMachine(stateMachine);\n  return (\n    <View style={styles.container}>\n      <Text>Temperature converter</Text>\n      <View style={styles.field}>\n        <Text>Celsius</Text>\n        <TextInput\n          keyboardType=\"numeric\"\n          onChange={(event) => {\n            if (isValidEvent(event.nativeEvent.text)) {\n              send(\"CHANGE_CELSIUS\", {\n                value: event.nativeEvent.text,\n              });\n            }\n          }}\n          value={context.celsius}\n        />\n      </View>\n      <View style={styles.field}>\n        <Text>Fahrenheit</Text>\n        <TextInput\n          keyboardType=\"numeric\"\n          value={context.fahrenheit}\n          onChange={(event) => {\n            if (isValidEvent(event.nativeEvent.text)) {\n              send(\"CHANGE_FAHRENHEIT\", {\n                value: event.nativeEvent.text,\n              });\n            }\n          }}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  field: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n  },\n});\n"],"sourceRoot":""}